# Copyright (c) 2022 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import("//base/print/print_fwk/print.gni")
import("//build/test.gni")

module_output_path = "print_fwk/service_test"

ohos_unittest("print_service_test") {
  module_out_path = module_output_path
  include_dirs = [
    "mock",
    "../fwk_inner_napi_test/mock",
    "${print_path}/frameworks/innerkitsimpl/print_impl/include",
    "${print_path}/frameworks/models/print_models/include",
    "${print_path}/interfaces/kits/napi/print_napi/include",
    "${print_path}/services/print_service/include",
    "${print_utils_path}/include",
    "//third_party/node/src",
  ]

  sanitize = {
    cfi = true
    cfi_cross_dso = true
    debug = false
    blocklist = "${print_path}/cfi_blocklist.txt"
  }

  sources = [
    "print_bms_death_recipient_test.cpp",
    "print_cups_attribute_test.cpp",
    "print_security_guard_info_test.cpp",
    "print_security_guard_manager_test.cpp",
    "print_service_converter_test.cpp",
    "print_service_helper_test.cpp",
    "print_system_data_test.cpp",
    "print_user_data_test.cpp",
  ]

  deps = [
    "${print_path}/etc/init:printservice.rc",
    "${print_path}/frameworks/innerkitsimpl/print_impl:print_client",
    "${print_path}/frameworks/kits/extension:print_extension_framework",
    "${print_path}/frameworks/kits/extension:print_extension_module",
    "${print_path}/frameworks/models/print_models:print_models",
    "${print_path}/interfaces/kits/jsnapi/print_extension:printextensionability_napi",
    "${print_path}/interfaces/kits/jsnapi/print_extensionctx:printextensioncontext_napi",
    "${print_path}/interfaces/kits/napi/print_napi:print_napi",
    "${print_path}/profile:print_sa_profiles",
    "${print_path}/services/print_service:print_service",
    "//third_party/googletest:gmock_main",
    "//third_party/jsoncpp:jsoncpp",
    "//third_party/zlib:libz",
  ]

  if (cups_enable) {
    include_dirs += [ "//third_party/cups/cups-2.4.0" ]
    cflags_cc = [ "-DCUPS_ENABLE" ]
    deps += [
      "//third_party/cups:third_party_cups",
      "//third_party/cups-filters:third_party_cupsfilters",
    ]
  }

  if (ipp_over_usb_enable) {
    include_dirs += [ "//third_party/cpp-httplib" ]
    sources += [
      "print_http_request_process_test.cpp",
      "print_http_server_manager_test.cpp",
      "print_ipp_over_usb_manager_test.cpp",
      "print_usb_manager_test.cpp",
    ]
    cflags_cc += [ "-DCPPHTTPLIB_NO_EXCEPTIONS" ]
    cflags_cc += [ "-DIPPOVERUSB_ENABLE" ]
  }

  external_deps = [
    "ability_base:base",
    "ability_base:want",
    "ability_base:zuri",
    "ability_runtime:ability_manager",
    "ability_runtime:abilitykit_native",
    "access_token:libaccesstoken_sdk",
    "access_token:libnativetoken",
    "access_token:libtoken_setproc",
    "bundle_framework:appexecfwk_base",
    "bundle_framework:appexecfwk_core",
    "c_utils:utils",
    "drivers_interface_usb:libusb_proxy_1.0",
    "hilog:libhilog",
    "ipc:ipc_core",
    "napi:ace_napi",
    "safwk:system_ability_fwk",
    "samgr:samgr_proxy",
    "usb_manager:usbsrv_client",
  ]
}

group("unittest") {
  testonly = true

  deps = []

  deps += [ ":print_service_test" ]
}
